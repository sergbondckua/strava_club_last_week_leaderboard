import os
from datetime import datetime, timedelta
from typing import List, Union

from aiogram import Bot, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, InputMediaPhoto

import config
from config import format_and_translate_date
from sender.album_sender import PosterAlbumSender


class TelegramSender(PosterAlbumSender):
    """
    –ö–ª–∞—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω—å —É Telegram —á–∞—Ç.
    –ù–∞—â–∞–¥–æ–∫ PosterAlbumSender, —â–æ –Ω–∞–¥–∞—î –º–µ—Ç–æ–¥–∏ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å —ñ–∑ –ø—ñ–¥–ø–∏—Å–∞–º–∏ –¥–æ –≤–∫–∞–∑–∞–Ω–æ–≥–æ —á–∞—Ç—É.
    """

    CLUB_ID = config.env.str("CLUB_ID")

    def __init__(self, bot_token: str):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –±–æ—Ç-—Ç–æ–∫–µ–Ω–æ–º"""
        self.bot = Bot(
            token=bot_token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML),
        )
        self.logger = config.logger

    @property
    def get_caption(self) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥–ø–∏—Å –¥–ª—è –∞–ª—å–±–æ–º—É"""
        strava_club_id = self.CLUB_ID

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Strava –∫–ª—É–±
        strava_url = (
            f"<a href='https://www.strava.com/clubs/{strava_club_id}'>StravaClub</a>"
            if strava_club_id
            else "<a href='https://www.strava.com/'>Strava</a>"
        )

        # –¢–µ–∫—Å—Ç –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º
        text = "–ü—ñ–¥—Å—É–º–æ–∫ {week}-–≥–æ —Ç–∏–∂–Ω—è –±—ñ–≥—É ({month}, {year})"
        last_week_date = datetime.now() - timedelta(weeks=1)
        description = config.translate.gettext(text).format(
            **format_and_translate_date(last_week_date)
        )
        tag_month = last_week_date.strftime("%B").lower()

        # –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å
        caption = (
            f"üìä <b>{description}</b>\n\n"
            f"#{tag_month} | #–ª—ñ–¥–µ—Ä–∏_—Ç–∏–∂–Ω—è | {strava_url}"
        )

        return caption

    async def get_media_group(self) -> List[InputMediaPhoto]:
        """
        –°—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ InputMediaPhoto –¥–ª—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏.
        """
        image_files = sorted(self.get_image_files())
        media_group = []

        for i, image_file in enumerate(image_files):
            # –¢—ñ–ª—å–∫–∏ –ø–µ—Ä—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞—Ç–∏–º–µ –ø—ñ–¥–ø–∏—Å
            caption = self.get_caption if i == 0 else None

            media_group.append(
                InputMediaPhoto(
                    media=FSInputFile(
                        os.path.join(self.IMAGE_PATH, image_file)
                    ),
                    caption=caption,
                    parse_mode=ParseMode.HTML,
                )
            )

        return media_group

    async def send_album_to_telegram(self, chat_id: Union[int, str]) -> None:
        """–ù–∞–¥—Å–∏–ª–∞—î –∞–ª—å–±–æ–º –∑–æ–±—Ä–∞–∂–µ–Ω—å —É Telegram —á–∞—Ç."""
        self.logger.info("–ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º—É –¥–æ —á–∞—Ç—É %s...", chat_id)

        try:
            async with self.bot as bot:

                # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                await bot.send_chat_action(
                    chat_id=chat_id, action="upload_photo"
                )

                # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–ª—å–±–æ–º
                media = await self.get_media_group()
                if not media:
                    self.logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
                    return

                await bot.send_media_group(chat_id=chat_id, media=media)
                self.logger.info(
                    "–ê–ª—å–±–æ–º —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ —á–∞—Ç—É %s", chat_id
                )

        except Exception as e:
            self.logger.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–ª—å–±–æ–º—É: %s", str(e))
            raise
